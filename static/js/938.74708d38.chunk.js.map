{"version":3,"file":"static/js/938.74708d38.chunk.js","mappings":"yOAAaA,EAAU,SAAAC,GAAE,OAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAI,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGsE,MAF/E,mCAEZJ,EAAK,sCAAAK,OAA0CT,EAAE,oCAAAS,OAFrC,oCAE+EH,EAAAE,KAAA,EACxEE,MAAMN,GAAM,OAArB,IAARC,EAAQC,EAAAK,MAEFC,GAAG,CAADN,EAAAE,KAAA,cACR,IAAIK,MAAM,+BAA+B,KAAD,SAAAP,EAAAQ,OAAA,SAEzCT,EAASU,QAAM,wBAAAT,EAAAU,OAAA,GAAAb,EAAA,IACvB,E,SCPYc,EAAY,SAAHC,GAAgB,IAAVlB,EAAEkB,EAAFlB,GAGxBmB,GAAyCC,EAAAA,EAAAA,UAAS,CAAEC,SAAU,CAAC,WAAYC,QAASvB,EAAQC,KAA9EuB,EAAIJ,EAAVK,KAAYC,EAASN,EAATM,UAAWC,EAAKP,EAALO,MACjC,OAAOC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACAH,IAASC,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,yBAAuBH,EAAMI,WACzCL,IAAaM,EAAAA,EAAAA,KAAA,KAAAF,SAAG,gBACfJ,IAAcC,GAASH,EAAKA,KAAKS,KAAI,SAAAC,GAAK,OAEhCN,EAAAA,EAAAA,MAAA,MAAAE,SAAA,EACQE,EAAAA,EAAAA,KAAA,MAAAF,SAAKI,EAAMC,QACXH,EAAAA,EAAAA,KAAA,OAAKI,IAAKF,EAAMG,aAAY,mCAAA3B,OAAsCwB,EAAMG,cAAY,iGAGpFC,IAAKJ,EAAMC,KACXI,MAAO,OAEPX,EAAAA,EAAAA,MAAA,KAAAE,SAAA,EACIE,EAAAA,EAAAA,KAAA,QAAAF,SAAO,UAAa,KACpBE,EAAAA,EAAAA,KAAA,QAAAF,SACqB,KAApBI,EAAMM,UAAmB,UAAYN,EAAMM,iBAX/CN,EAAMO,GAcV,MAIzB,ECrBG,EALU,WACT,IAAQC,GAAWC,EAAAA,EAAAA,MAAXD,QACR,OACIV,EAAAA,EAAAA,KAACd,EAAS,CAACjB,GAAIyC,EAAQZ,SAAC,SAEhC,C,uBCTA,SAASc,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAO1B,GAEP,YADAoB,EAAOpB,EAET,CACIyB,EAAKE,KACPR,EAAQO,GAERE,QAAQT,QAAQO,GAAOG,KAAKR,EAAOC,EAEvC,CACe,SAAS/C,EAAkBuD,GACxC,OAAO,WACL,IAAIC,EAAOC,KACTC,EAAOC,UACT,OAAO,IAAIN,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMY,EAAGK,MAAMJ,EAAME,GACzB,SAASZ,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CACA,SAASJ,EAAOc,GACdnB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASc,EACnE,CACAf,OAAMgB,EACR,GACF,CACF,C","sources":["components/utils/api/getCast.js","components/utils/api/fetchCast.js","Pages/Cast.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["export const getCast = Id => async () => {\n    const API_KEY = '064bc5fa04e70ee06b5bfcffdd0028ff'\n    // const query = \"https://api.themoviedb.org/3/movie/758679/credits?language=en-US&api_key=064bc5fa04e70ee06b5bfcffdd0028ff\"\n  const query =  `https://api.themoviedb.org/3/movie/${Id}/credits?language=en-US&api_key=${API_KEY}`\n    const response = await fetch(query)\n    \n  if (!response.ok) {\n    throw new Error('Network response was not ok');\n    }\n  return response.json();\n};","import { useQuery } from \"react-query\";\nimport { getCast } from \"./getCast\";\n\nexport const FetchCast = ({ Id }) => {\n  //  const backLinkHref = location.state?.from ?? '/movies';\n  // console.log(Id);\n    const { data: cast, isLoading, error } = useQuery({ queryKey: ['getCast'], queryFn: getCast(Id)});\n  return <>\n        {error && <p>Something went wrong: {error.message}</p>}\n        {isLoading && <p>Loading...</p>}\n        {!isLoading && !error && cast.cast.map(actor =>\n                (\n                    <li key={actor.id}>\n                            <h3>{actor.name}</h3>\n                            <img src={actor.profile_path ? `https://image.tmdb.org/t/p/w500/${actor.profile_path}`: `https://as2.ftcdn.net/v2/jpg/04/00/24/31/1000_F_400243185_BOxON3h9avMUX10RsDkt3pJ8iQx72kS3.jpg`\n                            }\n                           \n                            alt={actor.name}\n                            width={100}\n                            />\n                            <p >\n                                <span >Role:</span>{' '}\n                                <span >\n                                {actor.character === '' ? 'unknown' : actor.character}\n                                </span>\n                            </p>\n                    </li>\n                ))\n            }\n        </>\n}","import { useParams} from 'react-router-dom';\nimport { FetchCast } from \"components/utils/api/fetchCast\";\n\n\nconst Cast = () => {\n    const { idMovie} = useParams();\n    return (\n        <FetchCast Id={idMovie}> Cast</FetchCast>\n  );\n}; export default Cast;","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}"],"names":["getCast","Id","_asyncToGenerator","_regeneratorRuntime","_callee","query","response","_context","prev","next","concat","fetch","sent","ok","Error","abrupt","json","stop","FetchCast","_ref","_useQuery","useQuery","queryKey","queryFn","cast","data","isLoading","error","_jsxs","_Fragment","children","message","_jsx","map","actor","name","src","profile_path","alt","width","character","id","idMovie","useParams","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","then","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}